{"version":3,"sources":["components/VideoList.js"],"names":["VideoList","props","_this","Object","_Users_jsidharth_Desktop_VideoPlayer_videoplayerapp_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_jsidharth_Desktop_VideoPlayer_videoplayerapp_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_jsidharth_Desktop_VideoPlayer_videoplayerapp_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","hideLoader","setState","isLoading","state","_this2","document","addEventListener","documentElement","offsetHeight","window","innerHeight","scrollTop","infinite","findStartAndEnd","clearSearchList","videos","searchResults","start","length","end","_this3","map","keys","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","key","id","className","onClick","e","playVideo","style","width","height","src","concat","image","title","Description","console","log","Fragment","renderList","spinner","React","Component","connect"],"mappings":"4NAKMA,cACF,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,WAAa,WACTP,EAAKQ,SAAS,CAACC,WAAU,KANzBT,EAAKU,MAAQ,CACTD,WAAU,GAHAT,mFAUE,IAAAW,EAAAR,KAChBS,SAASC,iBAAiB,SAAU,WAC7BD,SAASE,gBAAgBC,eAAeC,OAAOC,YAAcL,SAASE,gBAAgBI,WAMrFP,EAAKZ,MAAMoB,SAAS,GAAGR,EAAKS,kBAAkBT,EAAKJ,6DAO3DJ,KAAKJ,MAAMsB,4DAGX,GAAGlB,KAAKJ,MAAMuB,OAAOC,cAErB,MAAO,CACHC,MAFOrB,KAAKJ,MAAMuB,OAAOC,cAAcE,OAGvCC,IAAI,wCAIA,IAAAC,EAAAxB,KAER,OADWA,KAAKJ,MAAMuB,OAAOC,cACjBK,IAAI,SAAAC,GAEZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAKK,IACfJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBAAkBC,QAAS,SAAAC,GAAIV,EAAK5B,MAAMuC,UAAUT,KACnEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBAAuBI,MAAO,CAACC,MAAM,OAAOC,OAAO,UAAWX,EAAAC,EAAAC,cAAA,OAAKU,IAAG,kBAAAC,OAAoBd,EAAKe,OAAUL,MAAO,CAACC,MAAM,OAAOC,OAAO,YACpJX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,0BACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WAAf,UAAiCN,EAAKgB,OACtCf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WAAUL,EAAAC,EAAAC,cAAA,sBAAoBH,EAAKiB,mDAW9D,OADIC,QAAQC,IAAI7C,KAAKO,MAAMD,UAAU,aAClCN,KAAKJ,MAAMuB,OAAOC,eAAiBpB,KAAKJ,MAAMuB,OAAOC,cAAcE,OAAQ,EAEtEK,EAAAC,EAAAC,cAACF,EAAAC,EAAMkB,SAAP,KACCnB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACZhC,KAAK+C,eASVpB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBAAuBL,EAAAC,EAAAC,cAAA,OAAKU,IAAKS,IAASX,MAAM,OAAOC,OAAO,iBAvEhEW,IAAMC,WAkFfC,sBALO,SAAC5C,GACnB,MAAM,CACFY,OAAOZ,EAAMY,SAGkB,CAACH,aAASE,qBAAlCiC,CAAoDxD","file":"static/js/3.0ee10a84.chunk.js","sourcesContent":["import React from \"react\"\nimport \"../css/VideoList.css\"\nimport {connect} from \"react-redux\"\nimport spinner from \"../css/gifs/spinner.gif\"\nimport {infinite,clearSearchList} from \"../actions/search\"\nclass VideoList extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isLoading:false\n        }\n    }\n   \n    hideLoader = () => {\n        this.setState({isLoading:false})\n    }\n    componentDidMount() {\n        document.addEventListener('scroll', () => {\n            if(document.documentElement.offsetHeight===window.innerHeight + document.documentElement.scrollTop) {\n                // this.setState((prevState) =>{return{\n                //     isLoading:true\n                // }}, () => {\n                // this.props.infinite(this.findStartAndEnd(),this.hideLoader);\n                // })\n                this.props.infinite(\"\",this.findStartAndEnd(),this.hideLoader);\n            }\n\n        })\n    }\n    \n    componentWillUnmount() {\n        this.props.clearSearchList();\n    }\n    findStartAndEnd() {\n        if(this.props.videos.searchResults) {\n        let length=this.props.videos.searchResults.length;\n        return {\n            start:length,\n            end:2\n        }\n    }\n    }\n    renderList(){\n        const list=this.props.videos.searchResults\n        return list.map(keys=>{\n           \n            return(\n                <div key={keys.id}>\n                <div className=\"list-container\"  onClick={e=>{this.props.playVideo(keys)}}>\n                <div className=\"list-image-container\" style={{width:\"20px\",height:\"100px\"}} ><img src={`/assets/images/${keys.image}`}  style={{width:\"100%\",height:\"200px\"}}/></div>\n                <div className=\"list-details-container\">\n                <div className=\"details\">Title: {keys.title}</div>\n                <div className=\"details\"><span>Desc: </span>{keys.Description}</div>\n                </div>\n               \n                </div>\n               \n                </div>\n            )\n        })\n    }\n    render(){\n        console.log(this.state.isLoading,\"isloading\")\n    if(this.props.videos.searchResults && this.props.videos.searchResults.length >0){\n        return(\n            <React.Fragment>\n             <div className=\"VideoList\">\n               {this.renderList()} \n            </div>\n            {/* {this.state.isLoading && <div className=\"loader\"><img src={spinner} style={{width:\"40px\",height:\"40px\"}}/></div>} */}\n            </React.Fragment>\n           \n        )\n    }\n    else{\n        return(\n           <div className=\"loader loader-search\"><img src={spinner} width=\"40px\" height=\"40px\"/></div>\n        )\n    }\n      \n    }\n}\nconst mapStateToProps=(state)=>{\n    return{\n        videos:state.videos\n    }\n}\nexport default connect(mapStateToProps,{infinite,clearSearchList})(VideoList);"],"sourceRoot":""}